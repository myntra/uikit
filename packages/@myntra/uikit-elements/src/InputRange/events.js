/**
 * Get co-ordinates from mouse event.
 *
 * @param {MouseEvent} event  The event generated by the document.
 * @returns {Object.<string, number>}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}
 */
export function getMousePosition(event) {
  return {
    x: event.pageX - (window.scrollX || window.pageXOffset),
    y: event.pageY - (window.scrollY || window.pageYOffset)
  }
}

/**
 * Get co-ordinates from touch event.
 *
 * @param {TouchEvent} event  The event generated by the document.
 * @returns {Object.<string, number>}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent}
 */
export function getTouchPosition(event) {
  return {
    x: event.touches[0].pageX - (window.scrollX || window.pageXOffset),
    y: event.touches[0].pageY - (window.scrollY || window.pageYOffset)
  }
}

/**
 * Stop propogation and default browser action on the event.
 *
 * @param {Event} event  The event generated by the document.
 * @returns {Object.<string, number>}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Event}
 */
export function pauseEvent(event) {
  event.stopPropagation()
  event.preventDefault()
}

/**
 * Add event listeners to the document for each event entry
 *
 * @param {Object.<string, function(Event)>} eventMap  Map of event types to its handler.
 */
export function addEventsToDocument(eventMap) {
  Object.keys(eventMap).forEach(key => {
    document.addEventListener(key, eventMap[key], false)
  })

  return () => {
    removeEventsFromDocument(eventMap)
  }
}

/**
 * Remove event listeners from the document for each event entry
 *
 * @param {Object.<string, function(Event)>} eventMap  Map of event types to its handler.
 */
export function removeEventsFromDocument(eventMap) {
  Object.keys(eventMap).forEach(key => {
    document.removeEventListener(key, eventMap[key], false)
  })
}
